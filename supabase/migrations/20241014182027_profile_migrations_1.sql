create type "public"."oauthprovider" as enum ('tumblr');

create table "public"."OAuthTokens" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "access" text not null,
    "refresh" text not null,
    "service" oauthprovider not null,
    "user" uuid not null,
    "expires_in" bigint not null
);


alter table "public"."OAuthTokens" enable row level security;


alter table "public"."Posts" enable row level security;

create table "public"."Profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user" uuid not null
);


alter table "public"."Profiles" enable row level security;

CREATE UNIQUE INDEX "OAuthTokens_pkey" ON public."OAuthTokens" USING btree (id);



CREATE UNIQUE INDEX "Profiles_pkey" ON public."Profiles" USING btree (id);

alter table "public"."OAuthTokens" add constraint "OAuthTokens_pkey" PRIMARY KEY using index "OAuthTokens_pkey";



alter table "public"."Profiles" add constraint "Profiles_pkey" PRIMARY KEY using index "Profiles_pkey";

alter table "public"."OAuthTokens" add constraint "OAuthTokens_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) not valid;

alter table "public"."OAuthTokens" validate constraint "OAuthTokens_user_fkey";

alter table "public"."Profiles" add constraint "Profiles_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) not valid;

alter table "public"."Profiles" validate constraint "Profiles_user_fkey";

grant delete on table "public"."OAuthTokens" to "anon";

grant insert on table "public"."OAuthTokens" to "anon";

grant references on table "public"."OAuthTokens" to "anon";

grant select on table "public"."OAuthTokens" to "anon";

grant trigger on table "public"."OAuthTokens" to "anon";

grant truncate on table "public"."OAuthTokens" to "anon";

grant update on table "public"."OAuthTokens" to "anon";

grant delete on table "public"."OAuthTokens" to "authenticated";

grant insert on table "public"."OAuthTokens" to "authenticated";

grant references on table "public"."OAuthTokens" to "authenticated";

grant select on table "public"."OAuthTokens" to "authenticated";

grant trigger on table "public"."OAuthTokens" to "authenticated";

grant truncate on table "public"."OAuthTokens" to "authenticated";

grant update on table "public"."OAuthTokens" to "authenticated";

grant delete on table "public"."OAuthTokens" to "service_role";

grant insert on table "public"."OAuthTokens" to "service_role";

grant references on table "public"."OAuthTokens" to "service_role";

grant select on table "public"."OAuthTokens" to "service_role";

grant trigger on table "public"."OAuthTokens" to "service_role";

grant truncate on table "public"."OAuthTokens" to "service_role";

grant update on table "public"."OAuthTokens" to "service_role";

grant delete on table "public"."Posts" to "anon";

grant insert on table "public"."Posts" to "anon";

grant references on table "public"."Posts" to "anon";

grant select on table "public"."Posts" to "anon";

grant trigger on table "public"."Posts" to "anon";

grant truncate on table "public"."Posts" to "anon";

grant update on table "public"."Posts" to "anon";

grant delete on table "public"."Posts" to "authenticated";

grant insert on table "public"."Posts" to "authenticated";

grant references on table "public"."Posts" to "authenticated";

grant select on table "public"."Posts" to "authenticated";

grant trigger on table "public"."Posts" to "authenticated";

grant truncate on table "public"."Posts" to "authenticated";

grant update on table "public"."Posts" to "authenticated";

grant delete on table "public"."Posts" to "service_role";

grant insert on table "public"."Posts" to "service_role";

grant references on table "public"."Posts" to "service_role";

grant select on table "public"."Posts" to "service_role";

grant trigger on table "public"."Posts" to "service_role";

grant truncate on table "public"."Posts" to "service_role";

grant update on table "public"."Posts" to "service_role";

grant delete on table "public"."Profiles" to "anon";

grant insert on table "public"."Profiles" to "anon";

grant references on table "public"."Profiles" to "anon";

grant select on table "public"."Profiles" to "anon";

grant trigger on table "public"."Profiles" to "anon";

grant truncate on table "public"."Profiles" to "anon";

grant update on table "public"."Profiles" to "anon";

grant delete on table "public"."Profiles" to "authenticated";

grant insert on table "public"."Profiles" to "authenticated";

grant references on table "public"."Profiles" to "authenticated";

grant select on table "public"."Profiles" to "authenticated";

grant trigger on table "public"."Profiles" to "authenticated";

grant truncate on table "public"."Profiles" to "authenticated";

grant update on table "public"."Profiles" to "authenticated";

grant delete on table "public"."Profiles" to "service_role";

grant insert on table "public"."Profiles" to "service_role";

grant references on table "public"."Profiles" to "service_role";

grant select on table "public"."Profiles" to "service_role";

grant trigger on table "public"."Profiles" to "service_role";

grant truncate on table "public"."Profiles" to "service_role";

grant update on table "public"."Profiles" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."OAuthTokens"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = (USER)::uuid));


create policy "Enable read access for all users"
on "public"."OAuthTokens"
as permissive
for select
to authenticated
using (true);


create policy "Insert new tokens only if authenticated"
on "public"."OAuthTokens"
as permissive
for insert
to authenticated
with check (true);



create policy "Policy with security definer functions"
on "public"."Posts"
as permissive
for all
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."Profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."Profiles"
as permissive
for select
to public
using (true);


